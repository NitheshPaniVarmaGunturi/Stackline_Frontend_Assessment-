{"version":3,"sources":["stackline_logo.svg","GetData.js","components/Product/Product.js","components/GraphData/GraphData.js","components/SalesTable/SalesTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","fetchData","dispatch","Promise","resolve","setTimeout","apiFetchData","then","data","type","payload","initialState","productData","loading","combinedReducers","combineReducers","dataFetchReducer","state","action","Header","className","logo","width","height","Product","image","title","subtitle","src","alt","ProductDescription","tags","Tags","map","tag","GraphData","parseDate","d3","x","domain","d","weekEnding","range","y","retailSales","y2","wholesaleSales","retailLine","curve","alpha","wholesaleLine","month","SalesTable","id","columns","accessor","forEach","entry","retailerMargin","processData","defaultSorted","showPagination","App","useSelector","useDispatch","useEffect","sales","Boolean","window","location","hostname","match","store","createStore","compose","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"irQAAAA,EAAOC,QAAU,IAA0B,4C,0OCW9BC,EAAY,WACvB,OAAO,SAAAC,GANL,IAAIC,SAAQ,SAAAC,GACRC,YAAW,kBACPD,EAAQE,EAAa,MAAK,QAKjBC,MAAK,SAAAC,GAClBN,EAAS,CACPO,KAAM,YACNC,QAASF,SAMbG,EAAe,CACnBC,YAAa,GACbC,SAAS,GAgBEC,EAAmBC,YAAgB,CAC5CC,iBAdqB,WAAmC,IAAlCC,EAAiC,uDAAzBN,EAAcO,EAAW,uCACzD,OAAQA,EAAOT,MACX,IA1BmB,YA2Bf,OAAO,2BACAQ,GADP,IAEIL,YAAaM,EAAOR,QACpBG,SAAS,IAEjB,QACI,OAAOI,M,yBChCXE,EAAS,WACX,OACI,yBAAKC,UAAU,UACX,4BAAQZ,KAAMa,IAAMC,MAAM,MAAMC,OAAO,OAAvC,OAKNC,EAAU,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC7B,OACI,yBAAKP,UAAU,WACX,yBAAKA,UAAU,eAAeQ,IAAKH,EAAOI,IAAKH,IAC/C,wBAAIN,UAAU,gBAAgBM,GAC9B,yBAAKN,UAAU,eACX,wBAAIA,UAAU,mBAAmBO,MAM3CG,EAAoB,SAAC,GAAY,IAAXtB,EAAU,EAAVA,KACxB,OACI,yBAAKY,UAAU,oBACX,kBAAC,EAAD,CAASM,MAAOlB,EAAKkB,MAAOD,MAAOjB,EAAKiB,MAAOE,SAAUnB,EAAKmB,WAC9D,kBAAC,EAAD,CAAMI,KAAMvB,EAAKuB,SAMvBC,EAAO,SAAC,GAAc,IAAZD,EAAW,EAAXA,KAMZ,OACI,yBAAKX,UAAU,oBACX,yBAAKA,UAAU,gBALfW,EAAKE,KAAI,SAAAC,GAAG,OAAK,yBAAKd,UAAU,OAAM,0BAAMA,UAAU,WAAWc,U,OCe9DC,G,MAhDG,SAAC,GAAY,IAAX3B,EAAU,EAAVA,KACV4B,EAAYC,IAAa,YAEzBC,EAAID,MACLE,OAAOF,IAAU7B,GAAM,SAAAgC,GAAC,OAAIJ,EAAUI,EAAEC,gBACxCC,MAAM,CAAC,EAAG,MAETC,EAAIN,MACLE,OAAO,CAAC,IAAKF,IAAO7B,GAAM,SAAAgC,GAAC,OAAIA,EAAEI,iBACjCF,MAAM,CAAC,IAAK,MAEXG,EAAKR,MACNE,OAAO,CAAC,IAAKF,IAAO7B,GAAM,SAAAgC,GAAC,OAAIA,EAAEM,oBACjCJ,MAAM,CAAC,IAAK,MAEXK,EAAaV,MACdC,GAAE,SAAA9B,GAAI,OAAI8B,EAAEF,EAAU5B,EAAKiC,gBAC3BE,GAAE,SAAAnC,GAAI,OAAImC,EAAEnC,EAAKoC,gBACjBI,MAAMX,IAAmBY,MAAM,KAE9BC,EAAgBb,MACjBC,GAAE,SAAA9B,GAAI,OAAI8B,EAAEF,EAAU5B,EAAKiC,gBAC3BE,GAAE,SAAAnC,GAAI,OAAIqC,EAAGrC,EAAKsC,mBAClBE,MAAMX,IAAmBY,MAAM,KAWpC,OACI,yBAAK7B,UAAW,SACZ,yBAAKA,UAAW,kBAChB,8CACI,yBAAKE,MAAO,IAAMC,OAAQ,KACtB,0BAAMH,UAAW,cAAeoB,EAAGO,EAAWvC,KAC9C,0BAAMY,UAAW,iBAAkBoB,EAAGU,EAAc1C,MAZ5D,yBAAKY,UAAW,UAFL,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAG7Ea,KAAI,SAAAkB,GAAK,OAAI,8BAAOA,W,QCC7BC,G,MA7BI,SAAC,GAAY,IAAX5C,EAAU,EAAVA,KAgBjB,OACI,yBAAK6C,GAAG,cACJ,kBAAC,IAAD,CACIC,QAVQ,CAChB,CAACnC,OAAO,cAAeoC,SAAS,cAChC,CAACpC,OAAO,eAAgBoC,SAAS,eACjC,CAACpC,OAAO,kBAAmBoC,SAAS,kBACpC,CAACpC,OAAO,aAAcoC,SAAS,aAC/B,CAACpC,OAAO,kBAAmBoC,SAAS,mBAM5B/C,KAnBQ,SAACA,GAMjB,OALAA,EAAKgD,SAAQ,SAACC,GACVA,EAAMb,YAAc,IAAMa,EAAMb,YAChCa,EAAMX,eAAiB,IAAMW,EAAMX,eACnCW,EAAMC,eAAiB,IAAMD,EAAMC,kBAEhClD,EAaOmD,CAAYnD,GAClBoD,cAAe,CAAC,CAAEP,GAAI,eACtBQ,gBAAgB,EAChBzC,UAAW,kBCUZ0C,G,MA7BH,WACR,IAAMtD,EAAOuD,aAAY,SAAC9C,GAAD,OAAWA,EAAMD,oBACpCd,EAAW8D,cAEjBC,qBAAU,WACN/D,EAASD,OACV,IAeH,OACI,yBAAKmB,UAAU,OACX,kBAAC,EAAD,MACCZ,EAAKK,QAdN,yBAAKO,UAAU,iBACX,kBAAC,EAAD,CAAoBZ,KAAMA,EAAKI,cAC/B,yBAAKQ,UAAU,oBACf,yBAAKA,UAAU,gBACX,kBAAC,EAAD,CAAWZ,KAAMA,EAAKI,YAAYsD,QAClC,kBAAC,EAAD,CAAY1D,KAAMA,EAAKI,YAAYsD,WASZ,QCrBvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCNFC,EAAQC,YACR3D,EAAkB4D,YAAQC,YAAgBC,OAG9CC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUP,MAAOA,GACb,kBAAC,EAAD,QAGRQ,SAASC,eAAe,SD6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7E,MAAK,SAAA8E,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d6c69087.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/stackline_logo.64b21497.svg\";","import apiFetchData from './stackline_frontend_assessment_data_2021.json';\nimport { combineReducers } from 'redux';\n\nexport const FETCH_API = 'FETCH_API';\n\nconst fetchAPIData = () =>\n    new Promise(resolve => {\n        setTimeout(() =>\n            resolve(apiFetchData[0]), 1000);\n    });\n\nexport const fetchData = () => {\n  return dispatch => {\n      fetchAPIData().then(data => {\n        dispatch({\n          type: \"FETCH_API\",\n          payload: data\n        });\n      });\n  }\n};\n\nconst initialState = {\n  productData: [],\n  loading: false\n};\n\nconst dataFetchReducer = (state = initialState, action) => {\n  switch (action.type) {\n      case FETCH_API:\n          return {\n              ...state,\n              productData: action.payload,\n              loading: true\n          };\n      default:\n          return state;\n  }\n};\n\nexport const combinedReducers = combineReducers({\n    dataFetchReducer\n});\n","import React from 'react';\nimport './styles.css';\nimport logo from '../../stackline_logo.svg';\n\nconst Header = () => {\n    return (\n        <div className='header'>\n            <object data={logo} width=\"300\" height=\"300\"> </object>\n        </div>\n    );\n};\n\nconst Product = ({ image, title, subtitle }) => {\n    return (\n        <div className='product'>\n            <img className='productImage' src={image} alt={title} />\n            <h4 className='productTitle'>{title}</h4>\n            <div className='subtitleDiv'>\n                <h5 className='productSubtitle'>{subtitle}</h5>\n            </div>\n        </div>\n    );\n};\n\nconst ProductDescription= ({data}) => {\n    return (\n        <div className='productContainer'>\n            <Product title={data.title} image={data.image} subtitle={data.subtitle}/>\n            <Tags tags={data.tags} />\n        \n        </div>\n    );\n}\n\nconst Tags = ({ tags }) => {\n    const renderTags = () =>{\n        return(\n            tags.map(tag => (<div className='tag'><span className='tagName'>{tag}</span></div>)\n        ))\n    };\n    return (\n        <div className='tagMainContainer'>\n            <div className='tagContainer'>\n                {renderTags()}\n            </div>\n        </div>\n    );\n};\n\nexport default Product;\n\nexport {Tags, ProductDescription, Header};\n\n\n","import React  from 'react';\nimport * as d3 from 'd3';\nimport './styles.css';\n\nconst GraphData = ({data}) => {\n    const parseDate = d3.timeParse('%Y-%m-%d');\n\n    const x = d3.scaleLinear()\n        .domain(d3.extent(data, d => parseDate(d.weekEnding)))\n        .range([0, 1000]);\n\n    const y = d3.scaleLinear()\n        .domain([100, d3.max(data, d => d.retailSales)])\n        .range([150, 100]);\n\n    const y2 = d3.scaleLinear()\n        .domain([150, d3.max(data, d => d.wholesaleSales)])\n        .range([200, 150]);\n\n    const retailLine = d3.line()\n        .x(data => x(parseDate(data.weekEnding)))\n        .y(data => y(data.retailSales))\n        .curve(d3.curveCatmullRom.alpha(0.1));\n\n    const wholesaleLine = d3.line()\n        .x(data => x(parseDate(data.weekEnding)))\n        .y(data => y2(data.wholesaleSales))\n        .curve(d3.curveCatmullRom.alpha(0.1));\n\n    const renderRow = () => {\n        const months = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];\n        return (\n            <div className={'months'}>\n                {months.map(month => <span>{month}</span>)}\n            </div>\n        );\n    };\n\n    return (\n        <div className={'graph'}>\n            <div className={'graphContainer'}>\n            <span>Retail Sales</span>\n                <svg width={1000} height={400}>\n                    <path className={'retailSales'} d={retailLine(data)} />\n                    <path className={'wholesaleSales'} d={wholesaleLine(data)} />\n                </svg>\n                {renderRow()}\n            </div>\n        </div>\n    );\n}\n\nexport default GraphData;\n","import React, {Component} from 'react';\nimport ReactTable from 'react-table';\nimport 'react-table/react-table.css'\n\n\nconst SalesTable = ({data}) => {\n    const processData = (data) =>{\n        data.forEach((entry)=>{\n            entry.retailSales = \"$\" + entry.retailSales;\n            entry.wholesaleSales = \"$\" + entry.wholesaleSales;\n            entry.retailerMargin = \"$\" + entry.retailerMargin;\n        });\n        return data;\n    }\n    const columnEntry = [\n        {Header:'Week Ending', accessor:'weekEnding'},\n        {Header:'Retail Sales', accessor:'retailSales'},\n        {Header:'Wholesale Sales', accessor:'wholesaleSales'},\n        {Header:'Units Sold', accessor:'unitsSold'},\n        {Header:'Retailer Margin', accessor:'retailerMargin'}\n    ];\n    return (\n        <div id='tableColor'>\n            <ReactTable\n                columns={columnEntry}\n                data={processData(data)}\n                defaultSorted={[{ id: 'weekEnding' }]}\n                showPagination={false}\n                className={'-highlight'}\n            />\n        </div>\n    );\n}\n\nexport default SalesTable;\n","import React, {useEffect} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {fetchData} from './GetData';\nimport {Header} from './components/Product/Product'\nimport {ProductDescription} from './components/Product/Product'\nimport GraphData from './components/GraphData/GraphData'\nimport SalesTable from './components/SalesTable/SalesTable'\nimport './App.css'\n\nconst App = () =>{\n    const data = useSelector((state) => state.dataFetchReducer);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchData());\n    }, []);\n\n    const renderData = () =>{\n        return (\n            <div className='mainContainer'>\n                <ProductDescription data={data.productData} />\n                <div className='contentContainer'>\n                <div className='salesRecords'>\n                    <GraphData data={data.productData.sales} />\n                    <SalesTable data={data.productData.sales} />\n                    </div>\n                </div>\n            </div>\n        );\n    };\n    return (\n        <div className=\"App\">\n            <Header/>\n            {data.loading ? renderData() : null}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve database; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore, compose, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport {combinedReducers} from './GetData';\n\n\nlet store = createStore(\n    combinedReducers, compose(applyMiddleware(thunk))\n);\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}